{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import cv2 as cv\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from glob import glob\n",
    "from datetime import datetime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "DATA_PATH = r'/scratch/gallowaa/cciw/Data'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Search for all video files on Google Drive...\n",
    "all_images = glob(os.path.join(DATA_PATH,'Videos_and_stills/GLNI/*/*/*/Images/Quad*/*.jpg'))\n",
    "#all_images = glob(os.path.join(DATA_PATH,'Videos_and_stills/GLNI/*/*/May.*/Stills/Quad*/*.jpg'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "imagetable_path = os.path.join(DATA_PATH, 'Tables', 'ImageTable.csv')\n",
    "image_df = pd.read_csv(imagetable_path, index_col=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "analysis_path = os.path.join(DATA_PATH, 'Tables', 'Analysis.csv')\n",
    "dive_path = os.path.join(DATA_PATH, 'Tables', 'Dives.csv')\n",
    "\n",
    "analysis_df = pd.read_csv(analysis_path, index_col=0, dtype={'Count':float})\n",
    "dive_df = pd.read_csv(dive_path, index_col=0, parse_dates=['Date'])\n",
    "data_df = pd.merge(analysis_df, dive_df, on='Dive Index', how='outer')\n",
    "data_df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"note: these indices were determined by visual \n",
    "inspection of the images for i) good illumination/\n",
    "clarity, ii) approximately constant camera distance,\n",
    "and iii) low cladophora cover.\"\"\" \n",
    "indices = np.concatenate((np.arange(50, 60), \n",
    "                          np.arange(78, 82),\n",
    "                          np.arange(92, 94),\n",
    "                          np.arange(103, 105),\n",
    "                          np.arange(129, 133),\n",
    "                          np.arange(156, 171),\n",
    "                          np.arange(129, 133),\n",
    "                          np.arange(196, 207),\n",
    "                          np.arange(218, 222),\n",
    "                          np.arange(236, 238),\n",
    "                         ))\n",
    "print(len(indices))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dim = []\n",
    "for i in indices:\n",
    "    im = cv.imread(all_images[i])\n",
    "    dim.append((i, im.shape[0]))\n",
    "dim = np.asarray(dim)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "working_set = dim[dim[:, 1] == 7378][:, 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#for i in range(280, 500):\n",
    "i=350\n",
    "im = cv.imread(all_images[i])\n",
    "rgb = cv.cvtColor(im, cv.COLOR_BGR2RGB)\n",
    "plt.imshow(rgb[::4, ::4, :])\n",
    "plt.title('frame ' + str(i))\n",
    "plt.show()\n",
    "#plt.pause(0.1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "root_fname = all_images[i].split('/')[-1].split('.')[0]\n",
    "guid = image_df[image_df['Name'].str.contains(root_fname)]['Analysis Index'].astype('int64')\n",
    "data_df[data_df['Analysis Index'].values == guid.values]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.close('all')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_images[350]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_df[data_df['Dive Index'].values == 520]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Number of dives for each year-month\n",
    "dive_df['Year-Month'] = dive_df['Date'].dt.strftime('%Y-%m')\n",
    "dive_df_by_year_month = dive_df.groupby(by='Year-Month').count()['PSN']\n",
    "dive_df_by_year_month.index = [datetime.strptime(year_month, '%Y-%m') for year_month in dive_df_by_year_month.index]\n",
    "#dive_df_by_year_month"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "YM = '2018-08'\n",
    "\n",
    "save_path = os.path.join('/scratch/ssd/gallowaa/cciw/dataset_raw_v0-2-x', YM + '/land') # '/land or /port'\n",
    "\n",
    "print(save_path)\n",
    "\n",
    "dive_idx = dive_df[dive_df['Year-Month'].values == YM].index #['Dive Index']\n",
    "print(dive_idx)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# analysis indices for data collected in 2018-07\n",
    "indices = data_df.loc[data_df['Dive Index'].isin(dive_idx)]['Analysis Index'].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#image_df[image_df['Analysis Index'].isin(indices)]\n",
    "fnames = image_df[image_df['Analysis Index'].isin(indices)]['Name']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_df.loc[data_df['Dive Index'].isin(dive_idx)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#data_df[data_df['Analysis Index'] == 57]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "root = os.path.join(DATA_PATH,'Videos_and_stills/GLNI/')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#fnames.values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dim = []\n",
    "month = 'Aug.' # Jul, Jun\n",
    "#for i, f in enumerate(fnames.values[portrait_mode]):\n",
    "for i, f in enumerate(fnames.values):\n",
    "    tokens = f.split('.')[0].split('_')\n",
    "    PSN = tokens[1].split('-')[0]\n",
    "    QUAD = tokens[1].split('-')[1]\n",
    "    file = root + PSN + '/2018/' + month + tokens[2].split('-')[-1] + '/Images/Quad' + QUAD + '/' + f.split('.')[0] + '.jpg'\n",
    "    im = cv.imread(file)\n",
    "    #rgb = cv.cvtColor(im, cv.COLOR_BGR2RGB)\n",
    "    #plt.imshow(rgb[::4, ::4, :])\n",
    "    #plt.title('frame ' + str(i))\n",
    "    #plt.pause(0.1)\n",
    "    dim.append((i, im.shape[0]))\n",
    "dim = np.asarray(dim)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "vals, cts = np.unique(dim[:, 1], return_counts=True)\n",
    "print(vals)\n",
    "print(cts)\n",
    "print(cts.sum())\n",
    "\n",
    "port_mode = dim[:, 0][dim[:, 1] == 7378]\n",
    "land_mode = dim[:, 0][dim[:, 1] == 4924]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#port_mode"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#land_mode"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#root_fname"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#fnames.values[land_mode]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#i = 12\n",
    "month = 'Aug.' # Jul, Jun\n",
    "#for i, f in enumerate(fnames.values[land_mode]):\n",
    "#f = fnames.values[land_mode][i]\n",
    "\n",
    "f = 'GLNI_3801-2_2018-08-13_image-2.jpg'\n",
    "tokens = f.split('.')[0].split('_')\n",
    "PSN = tokens[1].split('-')[0]\n",
    "QUAD = tokens[1].split('-')[1]\n",
    "file = root + PSN + '/2018/' + month + tokens[2].split('-')[-1] + '/Images/Quad' + QUAD + '/' + f.split('.')[0] + '.jpg'\n",
    "im = cv.imread(file)\n",
    "rgb = cv.cvtColor(im, cv.COLOR_BGR2RGB)\n",
    "\n",
    "#imc = im[y_start:y_end, x_start:x_end, :]\n",
    "#scale_percent = 75 # percent of original size\n",
    "#width = int(imc.shape[0] * scale_percent / 100)\n",
    "#height = int(imc.shape[1] * scale_percent / 100)\n",
    "\n",
    "# resize image\n",
    "#imcr = cv.resize(imc, (width, height))\n",
    "#cv.imwrite(os.path.join(save_path, f.split('.')[0] + '_crop.jpg'), imcr)\n",
    "#plt.figure(figsize=(6, 12))\n",
    "plt.imshow(im)\n",
    "#plt.title('frame ' + str(i) + ' of ' + str(len(fnames.values[portrait_mode])))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# for portrait mode (7378, 4924)\n",
    "\"\"\"\n",
    "x_start, x_end = 1050, 4050\n",
    "y_start, y_end = 2100, 5100\n",
    "\"\"\"\n",
    "# for landscape mode (4924, 7378)\n",
    "x_start, x_end = 2100, 5100\n",
    "#x_start, x_end = 2200, 5200\n",
    "#y_start, y_end = 800, 3800\n",
    "y_start, y_end = 1000, 4000\n",
    "\n",
    "print(x_end - x_start)\n",
    "print(y_end - y_start)\n",
    "\n",
    "imc = im[y_start:y_end, x_start:x_end, :]\n",
    "\n",
    "plt.figure(figsize=(6, 12))\n",
    "plt.imshow(imc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "scale_percent = 75 # percent of original size\n",
    "width = int(imc.shape[0] * scale_percent / 100)\n",
    "height = int(imc.shape[1] * scale_percent / 100)\n",
    "dim = (width, height)\n",
    "\n",
    "# resize image\n",
    "imcr = cv.resize(imc, dim)\n",
    "cv.imwrite(os.path.join(save_path, f.split('.')[0] + '_crop.jpg'), imcr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#width, height\n",
    "width / 250"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''\n",
    "wvz = 250 # 340, 283, 242, 212\n",
    "n_plot = imcr.shape[0] // wvz\n",
    "fig, axes = plt.subplots(n_plot, n_plot, figsize=(12, 12))\n",
    "\n",
    "for row in range(imcr.shape[0] // wvz):\n",
    "    for col in range(imcr.shape[0] // wvz):\n",
    "        axes[row, col].imshow(imcr[row*wvz:(1+row)*wvz, col*wvz:(col+1)*wvz])\n",
    "        axes[row, col].axis('off')\n",
    "plt.tight_layout()        \n",
    "'''\n",
    "#plt.savefig(file + '_viz.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#(66 + 37 + 31) * 9**2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# You left off here...\n",
    "plot Biomass/Count versus number of pixels labeled as mussel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#%matplotlib inline\n",
    "#i = 2\n",
    "#root_fname = fnames.values[portrait_mode][i].split('/')[-1].split('.')[0]\n",
    "#guid = image_df[image_df['Name'].str.contains(root_fname)]['Analysis Index'].astype('int64')\n",
    "#data_df[data_df['Analysis Index'].values == guid.values]\n",
    "\n",
    "guid = image_df[image_df['Name'].str.contains('3801-1_2018-08')]['Analysis Index'].astype('int64')\n",
    "data_df[data_df['Analysis Index'].values == np.unique(guid.values)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#fnames.values[land_mode]#[i].split('/')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#20 * 50"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# After Labeling\n",
    "`./labelme2voc.py /scratch/ssd/gallowaa/cciw/dataset_raw_v0-2-x/2018-06 /scratch/ssd/gallowaa/cciw/VOCdevkit/VOC2012_v020 --labels labels.txt` \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "mask_path = '/scratch/ssd/gallowaa/cciw/VOCdevkit/VOC2012_v024/SegmentationClassPNG'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "png_files = os.listdir(mask_path)\n",
    "print(len(png_files))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#png_files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# count the number of pixels assigned \"Zebra\" in image masks\n",
    "pix_ct = []\n",
    "for i in range(len(png_files)):\n",
    "    lab = cv.imread(os.path.join(mask_path, png_files[i]))\n",
    "    _, counts = np.unique(lab, return_counts=True)\n",
    "    pix_ct.append(counts[1])\n",
    "pix_ct = np.asarray(pix_ct) \n",
    "pix_ct = pix_ct / pix_ct.max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "lab_targets = np.zeros((len(png_files), 2)) # 0 = biomass, 1 = count\n",
    "for i in range(len(png_files)):\n",
    "    root_fname = png_files[i].split('.')[0][0:-5] \n",
    "    guid = image_df[image_df['Name'].str.contains(root_fname)]['Analysis Index'].astype('int64')\n",
    "    row = data_df[data_df['Analysis Index'].values == np.unique(guid.values)]\n",
    "    lab_targets[i, 0] = row['Biomass'].values\n",
    "    lab_targets[i, 1] = row['Count'].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "A = np.vstack([pix_ct, np.ones(len(pix_ct))]).T\n",
    "\n",
    "lab_targets[np.isnan(lab_targets)] = 0\n",
    "\n",
    "m, c = np.linalg.lstsq(A, lab_targets[:, 0], rcond=None)[0]\n",
    "x = np.linspace(0, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig, (ax, ax2) = plt.subplots(1, 2, sharex=True, figsize=(8, 4))\n",
    "\n",
    "BIOMASS = 0\n",
    "COUNTS = 1\n",
    "ax.scatter(pix_ct, lab_targets[:, BIOMASS], marker='o', s=40, facecolors='none', edgecolors='b')\n",
    "#ax.scatter(pix_ct[19], lab_targets[:, BIOMASS][19], marker='o', s=100, facecolors='none', edgecolors='k')\n",
    "ax.set_ylabel('Mussel Biomass', color='b')\n",
    "ax.set_xlabel('Normalized Segmentation Mask Pixel Count')\n",
    "#ax.set_xlim(0, 1)\n",
    "ax.plot(x, m*x + c, 'b')\n",
    "ax.grid()\n",
    "\n",
    "ax3 = ax2.twinx()  # instantiate a second axes that shares the same x-axis\n",
    "ax2.scatter(pix_ct, lab_targets[:, COUNTS], marker='+', c='r')\n",
    "ax3.set_ylabel('Mussel Count', color='r')\n",
    "ax2.grid()\n",
    "\n",
    "fname = 'mussel_biomass_and_count_versus_zebra_pixel_count_outliers'\n",
    "fig.savefig(fname + '.png', format='png')\n",
    "fig.savefig(fname + '.eps', format='eps')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "idx = (lab_targets[:, BIOMASS] > 300) & (pix_ct < 0.15)#.argmax()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "idx.argmax()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "png_files[19]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "GLNI_3540-2_2018-07-4_image_1_crop.json"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
